--- a/chrome/browser/ui/views/frame/browser_view_layout_delegate_impl.cc
+++ b/chrome/browser/ui/views/frame/browser_view_layout_delegate_impl.cc
@@ -69,6 +69,7 @@ bool BrowserViewLayoutDelegateImplBase::
 }
 
 bool BrowserViewLayoutDelegateImplBase::IsContentsSeparatorEnabled() const {
+  return false;
   // Web app windows manage their own separator.
   // TODO(crbug.com/40102629): Make PWAs set the visibility of the ToolbarView
   // based on whether it is visible instead of setting the height to 0px. This
--- a/chrome/browser/ui/views/frame/top_container_background.cc
+++ b/chrome/browser/ui/views/frame/top_container_background.cc
@@ -8,6 +8,7 @@
 
 #include "chrome/browser/themes/theme_properties.h"
 #include "chrome/browser/ui/color/chrome_color_id.h"
+#include "chrome/browser/ui/views/frame/browser_non_client_frame_view.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
 #include "chrome/browser/ui/views/tabs/tab_strip.h"
 #include "chrome/grit/theme_resources.h"
@@ -79,7 +80,8 @@ void TopContainerBackground::PaintBackgr
                                              const BrowserView* browser_view) {
   bool painted = PaintThemeCustomImage(canvas, view, browser_view);
   if (!painted) {
-    canvas->DrawColor(view->GetColorProvider()->GetColor(kColorToolbar));
+    canvas->DrawColor(browser_view->browser_widget()->GetFrameView()->GetFrameColor(
+        BrowserFrameActiveState::kUseCurrent));
   }
 }
 
@@ -88,7 +90,8 @@ std::optional<SkColor> TopContainerBackg
     const BrowserView* browser_view) {
   const bool will_be_painted = WillPaintCustomImage(view);
   if (!will_be_painted) {
-    return view->GetColorProvider()->GetColor(kColorToolbar);
+    return browser_view->browser_widget()->GetFrameView()->GetFrameColor(
+        BrowserFrameActiveState::kUseCurrent);
   }
 
   return std::nullopt;
